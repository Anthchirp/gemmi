Utilities
#########

The library comes with a few small command-line programs;
running a program is easier than calling a library function.

gemmi-validate
==============

A CIF validator.Apart from checking the syntax it can check rules
imposed by DDL1 and DDL2 dictionaries.

.. literalinclude:: validate-help.txt
   :language: console

gemmi-grep
==========

.. highlight:: console

Searches for a specified tag in CIF files and prints the associated values,
one value per line::

    $ gemmi-grep _refine.ls_R_factor_R_free 5fyi.cif.gz
    5FYI:0.2358
    $ gemmi-grep _refine.ls_R_factor_R_free 5moo.cif.gz
    5MOO:0.1596
    5MOO:0.1848
    $ gemmi-grep -b _software.name 5fyi.cif.gz
    DIMPLE
    PHENIX

The command-line option are meant to be, where possible, similar to the
options of GNU `grep`.

.. literalinclude:: grep-help.txt
   :language: console

This is a minimalistic program designed to be used together with Unix
text-processing utilities. For example, it cannot filter values itself,
but one may use grep::

    $ gemmi-grep _pdbx_database_related.db_name /pdb/mmCIF/aa/* | grep EMDB
    4AAS:EMDB
    5AA0:EMDB

If the searched tag is near the beginning of file, the option ``-O`` will make
gemmi-grep much faster. Searching the whole compressed mmCIF archive from
the PDB should take on an average computer between 10 and 30 minutes,
depending where the searched tag is located::

    $ gemmi-grep -O -b _entity_poly.type /pdb/mmCIF | sort | uniq -c
          1 cyclic-pseudo-peptide
          4 other
          2 peptide nucleic acid
       9905 polydeoxyribonucleotide
        156 polydeoxyribonucleotide/polyribonucleotide hybrid
         57 polypeptide(D)
     168923 polypeptide(L)
       4559 polyribonucleotide
         18 polysaccharide(D)

Programs in this section can work with any CIF files and have no features
specific to mmCIF. Except that when :ref:`$PDB_DIR <pdb_dir>` is set
one may use PDB codes: just ``5moo`` or ``5MOO`` instead of the path
to ``5moo.cif.gz``. And for convenience, using PDB code implies
option ``-O``.

In many scenarios one is interested only in a subset of the PDB and has
a list of PDB codes. Let say we want to look into group depositions.
First we may make a list of pdb entries that were deposited in groups::

    $ gemmi-grep -O _pdbx_deposit_group.group_title $PDB_DIR/structures | tee gid.out
    5OYQ:G_1002001
    5OYR:G_1002001
    [...]

And then, checking these (1238 as of Jun 2017) files takes only seconds::

    $ gemmi-grep -b -f gid.out  _pdbx_deposit_group.group_title | uniq -c
    364 High-Throughput Crystallography: Reliable and Efficient Identification of Fragment Hits.
    8 Crystal structures of Tyrosine-protein kinase BTK in complex with inhibitors
    860 PanDDA analysis group deposition
    6 NS5B 1b


gemmi-convert
=============

.. literalinclude:: convert-help.txt
   :language: console

This programs combines a few functions.

CIF -- JSON
-----------

Syntax-level conversion. The JSON representation of the CIF data
can be customized. In particular we support CIF-JSON_ standard from COMCIFS
and mmJSON_ standard from PDBj (the latter is specific to mmCIF files).

TODO: table with all the differences between the two

.. _CIF-JSON: http://comcifs.github.io/cif-json
.. _mmJSON: https://pdbj.org/help/mmjson?lang=en

mmCIF -- PDB -- mmJSON
----------------------

Conversion between macromolecular coordinate formats.

We made an effort to format the PDB files we write in the same way as the
software used internally by the PDB, apart from writing fewer records.
Thanks to this, in some scenarios a ``diff`` tool can be used to compare
a PDB file written by Gemmi with an official PDB file from PDB.

The library and the converter also have an option (``--iotbx-compat``)
that formats PDB files similarly to iotbx from cctbx (for example,
in this mode ``TER`` records have no numbers).
We do not aim to be fully compatible here, but in some cases
a command such as ``diff --ignore-space-change`` may be used to show
differences between a files generated by Gemmi and CCTBX.

NCS expansion
-------------
The option ``--expand-ncs`` expands strict NCS,
defined in the ``MTRIX`` record (PDB)
or in the ``_struct_ncs_oper`` table (mmCIF).
By default, new chains have different names than the original ones.
But when used together with ``--iotbx-compat``,
the program mimicks ``iotbx.pdb.expand_ncs`` and leaves the same chain names
while adding distinct segment IDs.


gemmi-map
=========

(work in progress)

.. literalinclude:: map-help.txt
   :language: console


gemmi-mask
==========

(work in progress)

.. literalinclude:: mask-help.txt
   :language: console

